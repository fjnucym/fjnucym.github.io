<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>python爬虫实战（一）</title>
      <link href="/2021/08/04/python-pa-chong-shi-zhan-yi/"/>
      <url>/2021/08/04/python-pa-chong-shi-zhan-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>个人对爬虫技术很感兴趣，用实战爬取网站的方式<code>学习爬虫相关库的使用</code>。</p><p>此次实战的目标是操作urllib、requests、bs4模块<code>爬取目标网站的图片</code>。</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p><a href="https://www.vcg.com/">🔗链接:视觉中国</a></p><p align="center"><img src="https://cdn.jsdelivr.net/gh/fjnucym/PicGo-CDN/img/VCG_LOGO.png" /> </p>             <p align="center">视觉中国</p><p>我们以 <em>武夷山</em> 为关键字查找图片，找到许多的图片。</p><p align="center"><img src="https://cdn.jsdelivr.net/gh/fjnucym/PicGo-CDN/img/image-20210803233023006.png" /> </p>             <p align="center">武夷山关键字</p><p>仔细观察目标网站的链接，一般web网站为了图片的批量显示都会将它们用类似的格式进行排版，那么用于排版的代码肯定有规律可循，所以我们必须观察网站的图片链接分布来进行爬取。分析目标网站是最重要的第一步。</p><h2 id="分析目标网站"><a href="#分析目标网站" class="headerlink" title="分析目标网站"></a>分析目标网站</h2><ul><li>观察网站链接:</li></ul><pre class="line-numbers language-http" data-language="http"><code class="language-http">网站链接<span class="token header-name keyword">https:</span>//www.vcg.com/creative-image/wuyishan/<span class="token header-name keyword">https:</span>//www.vcg.com/creative-image/关键字拼音/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>观察图片链接</li></ul><p align="center"><img src="https://cdn.jsdelivr.net/gh/fjnucym/PicGo-CDN/img/image-20210803233844972.png" /> </p>             <p align="center">Chrome F12 开发者工具</p><p>右键使用Edit as Html可以获取标签的内容。</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>imgWaper<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>https://www.vcg.com/creative/1253942458<span class="token punctuation">"</span></span> <span class="token attr-name">target</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>_blank<span class="token punctuation">"</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>opener<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>lazyload_hk ll_loaded<span class="token punctuation">"</span></span> <span class="token attr-name">data-src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//alifei03.cfp.cn/creative/vcg/nowarter800/new/VCG211253942458.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">data-min</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//alifei02.cfp.cn/creative/vcg/400/new/VCG211253942458.jpg<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//alifei03.cfp.cn/creative/vcg/nowarter800/new/VCG211253942458.jpg?x-oss-process=image/format,webp<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>武夷山图片素材ID:VCG211253942458<span class="token punctuation">"</span></span> <span class="token attr-name">draggable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>inPageShowHidden<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>武夷山图片素材ID:VCG211253942458<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>mask<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>headbar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里需要一点Html的知识，但是由于我对前端了解浅薄，只能够确定<code>图片链接是被包含在 img 标签内，img 标签被包含在 a 标签内。而图片的链接就是 img 标签内的 src、data-src 属性的值</code>。其中src后是wepb文件链接，data-src后是jpg文件链接。</p><h2 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h2><p>得益于python强大的库，代码编写很简单，看注释就行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 网站链接</span>url <span class="token operator">=</span> <span class="token string">"https://www.vcg.com/creative-image/wuyishan/"</span><span class="token comment"># 伪装请求头，否则可能会被识别出为py爬虫</span>headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment"># 发送请求，获取html页面内容</span>res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>res<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">"utf-8"</span><span class="token comment"># bs4 模块解析html，html.parser表示解析器</span>soup <span class="token operator">=</span> BeautifulSoup<span class="token punctuation">(</span>res<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token string">"html.parser"</span><span class="token punctuation">)</span><span class="token comment"># findAll可以很快地找到符合条件地标签，返回匹配的标签列表</span>imgTagList <span class="token operator">=</span> soup<span class="token punctuation">.</span>findAll<span class="token punctuation">(</span><span class="token string">"img"</span><span class="token punctuation">,</span> attrs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"class"</span><span class="token punctuation">:</span> <span class="token string">"lazyload_hk"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 遍历 img 标签列表获取链接，并且下载图片</span><span class="token keyword">for</span> index<span class="token punctuation">,</span> imgTag <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>imgTagList<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 获取链接</span>    imgLink <span class="token operator">=</span> <span class="token string">"http:"</span> <span class="token operator">+</span> imgTag<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"data-src"</span><span class="token punctuation">)</span>    <span class="token comment"># 请求文件数据</span>    imgData <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>imgLink<span class="token punctuation">)</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>content    <span class="token comment"># 下载文件</span>    imgPath <span class="token operator">=</span> <span class="token string">"image/wuyishan/&#123;0&#125;.jpg"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>imgPath<span class="token punctuation">,</span> <span class="token string">"wb+"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>imgData<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"图片 %s 下载成功!"</span> <span class="token operator">%</span> imgPath<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p align="center"><img src="https://cdn.jsdelivr.net/gh/fjnucym/PicGo-CDN/img/image-20210803235843084.png" /> </p>             <p align="center">运行截图</p><p>可以对程序进行扩展，使用xpinyin模块解析汉字输入为拼音，拼接在连接的位置可以做到下载任意关键字的图片。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>图片爬取的步骤流程</li></ul><pre class="line-numbers language-flow" data-language="flow"><code class="language-flow">st<span class="token operator">=></span>start<span class="token operator">:</span> 图片爬虫op1<span class="token operator">=></span>operation<span class="token operator">:</span> 分析目标网站<span class="token number">1.</span>网站链接<span class="token number">2.</span>图片链接在代码中的格式op2<span class="token operator">=></span>operation<span class="token operator">:</span> 发送目标网站请求<span class="token number">1.</span>伪装请求头<span class="token number">2.</span>伪装端口op3<span class="token operator">=></span>operation<span class="token operator">:</span> 解析网站<span class="token number">1.</span><span class="token function">根据标签获取标签集合</span><span class="token punctuation">(</span>bs4<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">2.</span><span class="token function">根据链接对应的属性获取链接</span><span class="token punctuation">(</span>bs4 中标签类的 <span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"data-src"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>op4<span class="token operator">=></span>operation<span class="token operator">:</span> 请求图片链接，获取图片二进制数据<span class="token number">1.</span>使用requests<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>的方式请求图片数据<span class="token number">2.</span>创建并打开文件存储写入图片数据e<span class="token operator">=></span>end<span class="token operator">:</span> 等待下载结束st<span class="token operator">-</span><span class="token operator">></span>op1<span class="token operator">-</span><span class="token operator">></span>op2<span class="token operator">-</span><span class="token operator">></span>op3<span class="token operator">-</span><span class="token operator">></span>op4<span class="token operator">-</span><span class="token operator">></span>e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>分析网页链接格式、分析图片布局格式</li></ul>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github的博客搭建指北</title>
      <link href="/2021/07/20/hexo-github-de-bo-ke-da-jian-zhi-bei/"/>
      <url>/2021/07/20/hexo-github-de-bo-ke-da-jian-zhi-bei/</url>
      
        <content type="html"><![CDATA[<h1 id="0-前言"><a href="#0-前言" class="headerlink" title="0 前言"></a>0 前言</h1><blockquote><p>个人博客是一个属于自己的小天地，在这里可以分享自己学习的过程，生活中的经历，现实中的美景，热爱的动漫，新鲜的技术……以及各种旁门左道。</p><p>丰富自己的生活，陶冶自己的琴操…….</p><p>那么如何才能搭建一个稳定可靠的博客呢？</p><p>本文将简单介绍在Windows上使用hexo、github建立个人博客的过程，起到备忘的作用。</p></blockquote><h1 id="1-前置准备"><a href="#1-前置准备" class="headerlink" title="1 前置准备"></a>1 前置准备</h1><ul><li>Node.js <em>Hexo 是一个基于nodejs 的静态博客网站生成器</em></li><li>git </li></ul><h2 id="1-1-安装Node-js"><a href="#1-1-安装Node-js" class="headerlink" title="1.1 安装Node.js"></a>1.1 安装Node.js</h2><p><a href="https://nodejs.org/en/">Node.js官网</a></p><p align="center"><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210720221815941.png" /> </p>             <p align="center">Node.js官网</p><p>安装LTS版本即可。一路next。</p><h2 id="1-2-安装Git"><a href="#1-2-安装Git" class="headerlink" title="1.2 安装Git"></a>1.2 安装Git</h2><p><a href="https://git-scm.com/downloads">Git官网</a></p><p align="center"><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210720221953357.png" /> </p>             <p align="center">Git官网</p><p>安装Git，一路next。安装成功后在任意的文件夹下右键就会出现这样的两行选项。我们主要使用<code>Git Bash Here</code></p><p align="center"><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210720222317801.png" /> </p>             <p align="center"></p><h2 id="1-3-安装hexo"><a href="#1-3-安装hexo" class="headerlink" title="1.3 安装hexo"></a>1.3 安装hexo</h2><p>在任意文件夹内使用<code>Git Bash Here</code>打开一个命令行。敲入或复制以下内容.</p><p><strong>[!重要]安装cnpm</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入<code>cnpm</code>查看安装是否成功。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cnpm install -g hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着输入<code>hexo -v</code>查看hexo是否安装成功，如果没有出现</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">bash: hexo: command not found<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这类提示就安装成功了。</p><p><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210720223122257.png" alt="image-20210720223122257"></p><h1 id="2-初始化本地博客"><a href="#2-初始化本地博客" class="headerlink" title="2 初始化本地博客"></a>2 初始化本地博客</h1><p>新建一个无中文路径的文件夹，如<code>D:\Blog</code>。作为博客的根目录，此目录必须是一个空目录！否则无法使用接下来的命令。</p><p>在<code>D:\Blog</code>使用<code>Git Bash Here</code>。</p><p><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210720223800759.png" alt="image-20210720223800759"></p><h2 id="2-1-初始化博客"><a href="#2-1-初始化博客" class="headerlink" title="2.1 初始化博客"></a>2.1 初始化博客</h2><p>敲入命令初始化博客。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo init<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p align="center"><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210720224105710.png" /> </p>             <p align="center">hexo初始化</p><p><code>D:\Blog</code>文件夹下出现这些文件</p><p><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210720224205274.png" alt="image-20210720224205274"></p><p>其中我们可能需要频繁修改_config.yml与themes文件夹下的主题文件来达到美化博客的目的。</p><h2 id="2-2-生成本地的博客"><a href="#2-2-生成本地的博客" class="headerlink" title="2.2 生成本地的博客"></a>2.2 生成本地的博客</h2><p>接着我们按顺序敲入命令，每次都等待一会命令执行。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo g# 开始自动生成生成博客<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210720224508717.png" alt="image-20210720224508717"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo s# 启动本地服务器测试<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210720224542757.png" alt="image-20210720224542757"></p><p>此时我们可以在任意浏览器输入<code>localhost:4000</code>查看博客的情况，初始化博客会有一个自带的主题和自动生成的Hellow World文章。</p><p><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210720224801992.png" alt="image-20210720224801992"></p><p>到这里说明博客的本地环境已经配置完成。接下来我们需要做的是将博客部署到远端的<code>github</code>上，利用github提供的github pages服务。</p><h2 id="3-开通-Github-上的个人博客仓库"><a href="#3-开通-Github-上的个人博客仓库" class="headerlink" title="3 开通 Github 上的个人博客仓库"></a>3 开通 Github 上的个人博客仓库</h2><p>需要一个Github账号，如果没有，请创建一个。</p><p> <img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210720225449504.png" alt="image-20210720225449504"></p><p>这个仓库的名字必须是<code>用户名.github.io</code>，后续这个网址将直接作为博客的链接，不可以乱搞哦。</p><h2 id="3-1-安装hexo的git部署插件"><a href="#3-1-安装hexo的git部署插件" class="headerlink" title="3.1 安装hexo的git部署插件"></a>3.1 安装hexo的git部署插件</h2><p>在<code>Git Bash Here</code>的命令行中输入下面的命令安装此插件，这个插件很重要。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cnpm <span class="token function">install</span> --save hexo-deployer<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-2-修改-config-yml文件"><a href="#3-2-修改-config-yml文件" class="headerlink" title="3.2 修改_config.yml文件"></a>3.2 修改_config.yml文件</h2><p>hexo可以部署的方式很多，这里既然使用了git，那么就需要在<code>D:\Blog\_config.yml</code>文件中修改一下相关的配置。</p><p>在<code>D:\Blog\_config.yml</code>文件的末尾做出如下修改。</p><p><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210720230523548.png" alt="image-20210720230523548"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span>deploy:  type: <span class="token string">'git'</span> <span class="token comment"># 注意 type 后有一个空格</span>  repo: https://github.com/用户名/用户名.github.io.git  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要把用户名改成Github注册时的用户名！！！！（这个repo其实就是刚刚注册的仓库的地址）</p><p>例如说我创建的博客仓库就是<code>https://github.com/fjnucym/fjnucym.github.io.git</code></p><h1 id="4-部署"><a href="#4-部署" class="headerlink" title="4 部署"></a>4 部署</h1><h2 id="4-1-部署到Github仓库"><a href="#4-1-部署到Github仓库" class="headerlink" title="4.1 部署到Github仓库"></a>4.1 部署到Github仓库</h2><p>准备工作完成。输入hexo的部署命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着可能会出现如下提示，需要我们输入Github的账号和密码。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Username <span class="token keyword">for</span> <span class="token string">'https://github.com'</span><span class="token builtin class-name">:</span> <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span> <span class="token comment"># 输入你的用户名 </span>Password <span class="token keyword">for</span> <span class="token string">'https://fjnucym@github.com'</span><span class="token builtin class-name">:</span> <span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.<span class="token comment"># 输入你的密码 密文，不会显示的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接着会有一大串提示，最后是</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">INFO Deploy done: <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>提示我们部署成功。</p><p>我们访问 <code>fjnucym.github.io</code>（用户名.github.io）查看情况。</p><p><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210720231751459.png" alt="image-20210720231751459"></p><h2 id="4-2-查看Github仓库"><a href="#4-2-查看Github仓库" class="headerlink" title="4.2 查看Github仓库"></a>4.2 查看Github仓库</h2><p>远端的Github仓库一定多了很多文件，这里拿我的仓库做示例，不过我的文件不是初始生成的那样，勉强看看吧。</p><p><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210720231855981.png" alt="image-20210720231855981"></p><p>部署完成，下次更新如何写文章。博客主题和美化请自行查找哦。这里放一张美化后博客可能的样子。</p><p><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210720232131153.png" alt="image-20210720232131153"></p>]]></content>
      
      
      <categories>
          
          <category> 个人博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> 个人博客 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt中将二进制数据转换为Base64编码格式</title>
      <link href="/2021/07/20/qt-zhong-jiang-er-jin-zhi-shu-ju-zhuan-huan-wei-base64-bian-ma-ge-shi/"/>
      <url>/2021/07/20/qt-zhong-jiang-er-jin-zhi-shu-ju-zhuan-huan-wei-base64-bian-ma-ge-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h2><p>QJson格式是只支持字符传输的，不支持二进制文件（例如图片）。我们可以将二进制文件转换为base64字符串达到转换二进制图片文件为字符串的形式存入QJson</p><p><strong>base64是什么？</strong></p><blockquote><p>Base64是网络上最常见的用于传输字节码的编码方式之一，Base64就是一种基于64个可打印字符来表示二进制数据的方法。可查看RFC2045～RFC2049，上面有MIME的详细规范。</p><p>Base64编码是从二进制到字符的过程，可用于在HTTP环境下传递较长的标识信息。采用Base64编码具有不可读性，需要解码后才能阅读。</p></blockquote><h2 id="QByteArray-binary-gt-QByteArray-base64"><a href="#QByteArray-binary-gt-QByteArray-base64" class="headerlink" title="QByteArray(binary) -&gt; QByteArray(base64)"></a>QByteArray(binary) -&gt; QByteArray(base64)</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFile></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QString></span></span>QByteArray <span class="token function">openBinaryFileAndGetBase64</span><span class="token punctuation">(</span>QString fileName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// ---------------打开文件，加载二进制文件----------------</span>    QFile <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"image/picture.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当然，你可以使用变量fileName</span>    <span class="token comment">// [重要] QIODevice使用前必须显示使用open</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token double-colon punctuation">::</span>ReadOnly<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"open file error"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    QByteArray byteArray <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// ----------------二进制字符数组转base64字符---------</span>    byteArray <span class="token operator">=</span> byteArray<span class="token punctuation">.</span><span class="token function">toBase64</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> byteArray<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>很简单，但是很遗憾，虽然QByteArray本身使用字符类型数组作为底层数据结构，QJson却不支持直接使用QByteArray传图片（QJson没有这个基本类型啊！！！）。所以我们需要将QByteArray（base64）-&gt; QString 才能存QJson里边（QJson的基本类型有QString）。</p><h2 id="QByteArray（base64）-gt-QString-base64"><a href="#QByteArray（base64）-gt-QString-base64" class="headerlink" title="QByteArray（base64） -&gt; QString(base64)"></a>QByteArray（base64） -&gt; QString(base64)</h2><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;QFile&gt;#include &lt;QString&gt;QString byteArray2Base64String(QString fileName)&#123;    QFile file(&quot;image&#x2F;picture.jpg&quot;);&#x2F;&#x2F; 当然，你可以使用变量fileName    &#x2F;&#x2F;[重要] QIODevice使用前必须显示使用open    if(!file.open(QIODevice::ReadOnly))&#123;qDebug() &lt;&lt; &quot;open file error&quot;;    &#125;    QByteArray byteArray &#x3D; file.readAll();    QString base64String &#x3D; QString::fromUtf8(byteArray.toBase64());    &#x2F;&#x2F; base64字符都很长（超级长），直接打印控制无法显示    &#x2F;&#x2F; 使用QString::mid(int pos, int n); 打印1000个字符看看样子    &#x2F;&#x2F; qDebug() &lt;&lt; base64String.mid(0, 1000);    return base64String;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>*static QString QString::fromUtf8(const QByteArray &amp;)*支持从QByteArray载入字符，作为转换。</p><p><strong>结果预览</strong></p><p><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210514193333008.png" alt="image-20210514193333008"></p><h2 id="QString-base64-gt-QByteArray"><a href="#QString-base64-gt-QByteArray" class="headerlink" title="QString(base64) -&gt; QByteArray"></a>QString(base64) -&gt; QByteArray</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QByteArray></span></span><span class="token keyword">void</span> <span class="token function">string2Base64</span><span class="token punctuation">(</span>QString<span class="token operator">&amp;</span> baseStr<span class="token punctuation">,</span> QByteArray <span class="token operator">&amp;</span>byteArray<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>byteArray <span class="token operator">=</span> byteArray<span class="token punctuation">.</span><span class="token function">fromBase64</span><span class="token punctuation">(</span>baseStr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>直接利用*QByteArray::fromBase64(const QByteArray &amp;)*就能实现。那为什么要用函数呢？</p><p><strong>原因</strong></p><p>QByteArray是隐式共享的，就是说我们函数内构造出的QByteArray 对象在返回给外部的时候，它的内存空间因为离开了作用域被释放了！外部得到的是被释放的过的空间，而不是新的空间，此时一定会有空指针的异常。所以这里使用函数的方式来特别阐明这个问题（我们的QByteArray是外部传入的，这样函数返回时不会销毁它占用的内存空间）。</p><p>详细可以看看这篇文章，里面包含了Qt隐式共享实现的所有类。</p><p><a href="https://www.cnblogs.com/Vancamel/p/11346282.html">Qt框架浅析之一 ——- 隐式共享(Implicit Sharing)</a></p><p><strong>另外</strong></p><p>不可以直接使用构造函数来构造QByteArray，那样的出来的QByteArray并不是Utf8类型的，他的数据和原始数据是不对应的。谨记！</p><h2 id="打开二进制文件直接打印是什么样子？"><a href="#打开二进制文件直接打印是什么样子？" class="headerlink" title="打开二进制文件直接打印是什么样子？"></a>打开二进制文件直接打印是什么样子？</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">printBinaryFile</span><span class="token punctuation">(</span>QString fileName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    QFile <span class="token function">file</span><span class="token punctuation">(</span><span class="token string">"image/picture.jpg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 当然，你可以使用变量fileName</span>    <span class="token comment">//[重要] QIODevice使用前必须显示使用open</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span>QIODevice<span class="token double-colon punctuation">::</span>ReadOnly<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"open file error"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    QByteArray byteArray <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">readAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//[重要] 文件太大Qt无法打印的，只取1000个看看</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> byteArray<span class="token punctuation">.</span><span class="token function">mid</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果预览</strong></p><p><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210514195933865.png" alt="image-20210514195933865"></p>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
            <tag> Json </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL中获取自增主键的最新自增值</title>
      <link href="/2021/07/20/mysql-zhong-huo-qu-zi-zeng-zhu-jian-de-zui-xin-zi-zeng-zhi/"/>
      <url>/2021/07/20/mysql-zhong-huo-qu-zi-zeng-zhu-jian-de-zui-xin-zi-zeng-zhi/</url>
      
        <content type="html"><![CDATA[<h2 id="MySql中插入数据时获取新增的主键"><a href="#MySql中插入数据时获取新增的主键" class="headerlink" title="MySql中插入数据时获取新增的主键"></a>MySql中插入数据时获取新增的主键</h2><p>有时候我们需要设计数据库时将主键设置为自增了，插入数据时使用</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> tbl_xxx<span class="token punctuation">(</span>id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token string">'test'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>的方式。主键id的指定值是NULL时是默认自增的。</p><p>我们想在插入记录的同时获得刚刚插入的主键值，可以采用以下方法。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> LAST_INSERT_ID<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">-- 这是一个函数，保存了上一次数据插入时第一条自增ID的值</span><span class="token keyword">SELECT</span> @<span class="token variable">@IDENTITY</span><span class="token punctuation">;</span><span class="token comment">-- 这是一个全局变量，保存了上一次生成的自增ID值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><em>LAST_INSERT_ID()在批量插入数据时，返回批量插入中第一个自增ID的值</em></p><p><em>@@IDENTITY永远返回最后一次生成的自增ID值</em></p><p>值得一提的是，采用以下方法是错误的。</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token function">MAX</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span> <span class="token keyword">FROM</span> tbl_xxx<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>性能低，并且在高并发的时候返回的值不正确。</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>anaconda管理python环境</title>
      <link href="/2021/07/20/anaconda-guan-li-python-huan-jing/"/>
      <url>/2021/07/20/anaconda-guan-li-python-huan-jing/</url>
      
        <content type="html"><![CDATA[<h2 id="安装python"><a href="#安装python" class="headerlink" title="安装python"></a>安装python</h2><h3 id="使用anoconda管理python版本"><a href="#使用anoconda管理python版本" class="headerlink" title="使用anoconda管理python版本"></a>使用anoconda管理python版本</h3><p><strong>为什么使用要进行版本管理？</strong></p><blockquote><p>python的版本管理问题一直是很令人头疼，因为使用python时可能需要针对工作的环境下载不同的依赖包，配置适合某个版本的整体的依赖包，例如说进行图像处理学习的整个依赖环境、进行深度学习的整个依赖环境。</p><p>使用anoconda管理python和依赖包可以达到便捷的目的。</p></blockquote><p><strong>创建一个使用anaconda的python工程</strong></p><p>我们需要在pycharm中创建一个基于anoconda环境的工程，在创建时就可以选择对应的python版本，同时项目创建完成时会在 <em>D:\Environment\anaconda\envs（我此时anaconda的根目录下的envs）</em> 目录下创建一个与工程同名的文件夹用于存储完整的环境依赖。</p><p align="center"><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210623230555160.png" /> </p><p align="center">创建一个包含完整依赖包的工程</p><p><strong>查看anaconda所有已创建的环境</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">conda info -e <span class="token comment"># 控制台下</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p align="center"><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210623231759367.png" /> </p><p align="center">查看已创建的环境</p><p><strong>激活环境</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">activate 工程名<span class="token comment"># 例 activate Test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p align="center"><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210711234256673.png" /> </p>             <p align="center">进入learn-demo虚拟环境</p><p><strong>安装只属于此环境的依赖包</strong></p><p>进入新创建的环境后我们可以使用pip工具安装只属于此环境的依赖包</p><p>①使用离线文件(如.whl)安装</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip <span class="token function">install</span> 文件全路径 <span class="token comment"># 可以将文件拖入控制台</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>②在线安装(无翻墙情况下很慢)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pip <span class="token function">install</span> <span class="token assign-left variable">numpy</span><span class="token operator">==</span><span class="token number">1.18</span>.5<span class="token comment"># 指定安装包的版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>python依赖包的获取网址</strong></p><p>python使用pip工具进行包管理，有时候需要下载离线包，可以从pypi网址上搜索各个版本的安装包。</p><p><a href="https://pypi.org/">https://pypi.org/</a></p><p align="center"><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210623225706899.png" /> </p><p align="center">pypi</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> anaconda </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pymysql在Windows下的使用</title>
      <link href="/2021/07/20/pymysql-zai-windows-xia-de-shi-yong/"/>
      <url>/2021/07/20/pymysql-zai-windows-xia-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="windows上的MySQL服务安装"><a href="#windows上的MySQL服务安装" class="headerlink" title="windows上的MySQL服务安装"></a>windows上的MySQL服务安装</h2><p><strong>MySQL下载：</strong><br>官网提供的安装MySQL的方式有三种：<br>在线安装版：mysql-installer-web-community.msi<br>离线安装版：mysql-installer-community.msi<br>解压缩版：mysql-8.0.25-winx64.zip<br>但实质上只有两种，一种是用安装包安装，一种是用压缩包安装。<br>官网下载：<a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p><p><em>解压安装解压后的文件夹放在能找到的地方，后续都会有用</em></p><p><strong>管理员模式下运行CMD！</strong></p><p align="center"><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210710211248662.png" /> </p>             <p align="center">根目录下的bin文件夹</p><p>进入解压后目录下的bin文件夹，此处能够启动mysql.exe程序。</p><p>输入以下命令并回车，初始化mysql…… 同时可以获取mysql的root账户生成的随机初始密码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysqld --initialize --console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如下， 但由于初始化过一次。这里使用D:\Environment\mysql-8.0.25-winx64\data 下的 ==LAPTOP-65M4UVJB.err==文件里的内容代替。（目测日志输出都会在这里，只要找到以.err为后缀的文件用记事本打开即可）</p><p>密码是红色标明的位置。</p><p align="center"><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210710212004821.png" /> </p><p align="center">一定要记住密码！实在实在不行去文件里看</p><p><strong>启动mysql服务</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">net start mysqlsc start mysql<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p align="center"><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210710212153589.png" /> </p><p align="center"></p><p><strong>进入mysql命令行</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">mysql -u root -p<span class="token comment"># 登陆root账户</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要输入密码</p><p>账号:root  密码:初始化生成的</p><p align="center"><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210710212335881.png" /> </p><p align="center">修改mysql账号密码</p><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">alter user <span class="token string">'root'</span>@<span class="token string">'localhost'</span> identified by <span class="token string">'想要设置的密码'</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><em>改个简单的密码！</em></p><h2 id="修改系统环境变量，任意处启动mysql命令行"><a href="#修改系统环境变量，任意处启动mysql命令行" class="headerlink" title="修改系统环境变量，任意处启动mysql命令行"></a>修改系统环境变量，任意处启动mysql命令行</h2><p>将==D:\Environment\mysql-8.0.25-winx64\bin==加入到系统环境变量中</p><p align="center"><img src="https://gitee.com/aiyudehua/drawing-bed/raw/master/https://gitee.com/aiyudehua/drawing-bed/tree/master/img/image-20210710212902863.png" /> </p><p align="center">修改环境变量</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
